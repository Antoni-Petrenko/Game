{"version":3,"sources":["components/Game/GameField/Cell/Cell.module.css","components/Game/PlayerSetup/PlayerSetup.module.css","components/Game/GameField/GameField.module.css","components/Game/Message/Message.module.css","components/Game/Game.module.css","components/LeaderBoard/Player/Player.module.css","components/LeaderBoard/LeaderBoard.module.css","App.module.css","constants/ActionTypes.js","constants/DefaustState.js","constants/index.js","actions/ActionsCreators.js","actions/Date.js","actions/AppAsyncActions.js","actions/GameAction.js","components/Game/GameField/Cell/Cell.js","components/Game/GameField/GameField.js","components/Game/Message/Message.js","components/Game/PlayerSetup/PlayerSetup.js","components/Game/index.js","components/LeaderBoard/Player/Player.js","components/LeaderBoard/index.js","App.js","reducers/AppReducer.js","reducers/GameReducer.js","reducers/rootReducer.js","index.js","store/configureStor.js"],"names":["module","exports","GET_GAME_SETTINGS","GET_LEADER_BOARD","SET_GAME_SETTINGS","SET_PLAYER_NAME","POST_GAME_RESULT","TO_DRAW_FIELD","START_GAME","GENERATE_RANDOM_CELL","MAKE_CHOICE","FINISH_GAME","PLAYER_WIN","AI_WIN","A_DRAW","CONNECTION_ERROR","AppDefaultState","levels","player","defaultSettings","delay","field","winner","liaderBoard","message","GameDefaultState","AIPoints","PlayerPoints","filledCells","gameIsOn","isFirstGame","types","defaultState","constants","getGameSettingsSuccess","data","type","payload","getLeaderBoardSuccess","drawGameField","settings","generateCell","checkWiner","possibleFields","length","objToday","Date","curHour","getHours","dayOfMonth","getDate","curMinute","getMinutes","curMonth","getMonth","curYear","getFullYear","requestLeaderBoard","dispatch","a","fetch","response","json","choice","fieldID","whoClicked","getState","cellID","makeChoice","Game","App","method","headers","body","JSON","stringify","date","ok","Cell","timer","id","useSelector","state","isActive","whoseField","useDispatch","setTimeout","className","styles","push","join","onClick","clearTimeout","GameField","fields","fieldSideSize","Math","sqrt","style","width","height","Array","fill","map","cell","index","key","Message","includes","color","PlayerSetup","levelsList","useEffect","difficultyNames","Object","keys","useState","playerName","setName","isDifficultyChoiced","choiceDifficulty","handlers","select","e","target","value","input","submit","name","preventDefault","onSubmit","onChange","disabled","replace","placeholder","required","request","Player","LeaderBoard","players","reverse","combineReducers","action","pow","resetField","randomID","i","randID","round","random","filter","store","createStore","rootReducer","applyMiddleware","thunk","app","console","dir","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.20ac5071.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Field\":\"Cell_Field__2FUYK\",\"Active\":\"Cell_Active__2RZ0s\",\"Player\":\"Cell_Player__mmEoV\",\"AI\":\"Cell_AI__azOIQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"PlayerSetup_Form__OFasL\",\"Select\":\"PlayerSetup_Select__1YIFC\",\"Input\":\"PlayerSetup_Input__2sqPv\",\"Button\":\"PlayerSetup_Button__1G-2m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"GameField\":\"GameField_GameField__16H08\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Message\":\"Message_Message__1Ec3l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Game\":\"Game_Game__hO0k3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PlayerItem\":\"Player_PlayerItem__qUhtM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LeaderBoard\":\"LeaderBoard_LeaderBoard__8Lr0o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__3mn1Z\"};","export const GET_GAME_SETTINGS = \"GET_GAME_SETTINGS\";\r\nexport const GET_LEADER_BOARD = \"GET_LEADER_BOARD\";\r\n\r\nexport const SET_GAME_SETTINGS = \"SET_GAME_SETTINGS\";\r\nexport const SET_PLAYER_NAME = \"SET_PLAYER_NAME\";\r\nexport const POST_GAME_RESULT = \"POST_GAME_RESULT\";\r\n\r\nexport const TO_DRAW_FIELD = \"TO_DRAW_FIELD\";\r\n\r\nexport const START_GAME = \"START_GAME\";\r\nexport const GENERATE_RANDOM_CELL = \"GENERATE_RANDOM_CELL\";\r\nexport const MAKE_CHOICE = \"MAKE_CHOICE\";\r\nexport const FINISH_GAME = \"FINISH_GAME\";\r\n\r\nexport const PLAYER_WIN = \"PLAYER_WIN\";\r\nexport const AI_WIN = \"AI_WIN\";\r\nexport const A_DRAW = \"A_DRAW\";\r\n\r\nexport const CONNECTION_ERROR = \"CONNECTION_ERROR\";\r\n","export const AppDefaultState = {\r\n  levels: {},\r\n  player: \"\",\r\n  defaultSettings: { delay: 2000, field: 5 },\r\n  winner: \"\",\r\n  liaderBoard: [],\r\n  message: \"\"\r\n};\r\n\r\nexport const GameDefaultState = {\r\n  AIPoints: 0,\r\n  PlayerPoints: 0,\r\n  filledCells: [],\r\n  field: [],\r\n  delay: 0,\r\n  gameIsOn: false,\r\n  isFirstGame: true\r\n};\r\n","import * as types from \"./ActionTypes\";\r\nimport * as defaultState from \"./DefaustState\";\r\n\r\nexport default {\r\n  types,\r\n  defaultState\r\n};\r\n","import constants from \"../constants/\";\r\n\r\nconst { types } = constants;\r\n\r\nexport const getGameSettingsSuccess = data => ({\r\n  type: types.GET_GAME_SETTINGS,\r\n  payload: data\r\n});\r\n\r\nexport const getGameSettingsFailure = () => ({\r\n  type: types.CONNECTION_ERROR,\r\n  payload: \"Check your internet connection\"\r\n});\r\n\r\nexport const savePlayerName = name => ({\r\n  type: types.SET_PLAYER_NAME,\r\n  payload: name\r\n});\r\n\r\nexport const getLeaderBoardSuccess = data => ({\r\n  type: types.GET_LEADER_BOARD,\r\n  payload: data\r\n});\r\n\r\nexport const getLeaderBoardFailure = () => ({\r\n  type: types.CONNECTION_ERROR,\r\n  payload: \"Check your internet connection\"\r\n});\r\n\r\nexport const postGameResultFailure=()=>({\r\n    type: types.CONNECTION_ERROR,\r\n    payload: \"Check your internet connection\"\r\n}) \r\n\r\nexport const startGame = () => ({\r\n  type: types.START_GAME\r\n});\r\n\r\nexport const drawGameField = settings => ({\r\n  type: types.TO_DRAW_FIELD,\r\n  payload: settings\r\n});\r\n\r\nexport const generateCell = () => ({\r\n  type: types.GENERATE_RANDOM_CELL\r\n});\r\n\r\nexport const makeChoice =(cellID, whoClicked)=> ({\r\n  type: types.MAKE_CHOICE,\r\n  payload: {\r\n    cellID, whoClicked\r\n  }\r\n});\r\n\r\nexport const finishGame = () => ({\r\n  type: types.FINISH_GAME\r\n});\r\n\r\nexport const checkWiner = ({ AIPoints, PlayerPoints, field}) => {\r\n  const possibleFields = field.length;\r\n  if (AIPoints > possibleFields * 0.5) {\r\n    return {\r\n      type: types.AI_WIN,\r\n    };\r\n  } else if (PlayerPoints > possibleFields * 0.5) {\r\n    return {\r\n      type: types.PLAYER_WIN,\r\n    }\r\n  } else if (\r\n    (PlayerPoints + AIPoints === field.length) &\r\n    (PlayerPoints === AIPoints)\r\n  ) {\r\n    return {\r\n      type: types.A_DRAW\r\n    }\r\n  }\r\n  return false;\r\n};\r\n","export default () => {\r\n  const objToday = new Date();\r\n  const months = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\"\r\n  ];\r\n\r\n  const curHour =\r\n    objToday.getHours() < 10 \r\n    ? \"0\" + objToday.getHours() \r\n    : objToday.getHours();\r\n\r\n  const dayOfMonth = objToday.getDate();\r\n  \r\n  const curMinute =\r\n    objToday.getMinutes() < 10\r\n      ? \"0\" + objToday.getMinutes()\r\n      : objToday.getMinutes();\r\n\r\n  const curMonth = months[objToday.getMonth()];\r\n  const curYear = objToday.getFullYear();\r\n\r\n  return `${curHour}:${curMinute}; ${dayOfMonth} ${curMonth} ${curYear}`;\r\n};\r\n","import {\r\n  getGameSettingsSuccess,\r\n  getGameSettingsFailure,\r\n  getLeaderBoardSuccess,\r\n  getLeaderBoardFailure,\r\n  postGameResultFailure,\r\n} from \"./ActionsCreators\";\r\n\r\nimport getDate from \"./Date\";\r\n\r\nexport const requestGameSettings = () => {\r\n  return async dispatch => {\r\n    try {\r\n      const request = await fetch(\r\n        \"https://starnavi-frontend-test-task.herokuapp.com/game-settings\"\r\n      );\r\n      const data = await request.json();\r\n      dispatch(getGameSettingsSuccess(data));\r\n    } catch {\r\n      dispatch(getGameSettingsFailure());\r\n    }\r\n  };\r\n};\r\n\r\nexport const requestLeaderBoard = () => {\r\n  return async dispatch => {\r\n    try {\r\n      \r\n      const response = await fetch(\r\n        \"https://starnavi-frontend-test-task.herokuapp.com/winners\"\r\n      );\r\n      const data = await response.json();\r\n      dispatch(getLeaderBoardSuccess(data));\r\n    } catch {\r\n      dispatch(getLeaderBoardFailure());\r\n    }\r\n  };\r\n};\r\n\r\nexport const postGameResult = () => {\r\n  return async (dispatch,getState)  => {\r\n    try {\r\n      const {App} = getState();\r\n      const response = await fetch(\"https://starnavi-frontend-test-task.herokuapp.com/winners\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Accept\": \"application/json\",\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({ winner:App.winner, date: getDate() })\r\n      });\r\n      if(response.ok){\r\n        dispatch(requestLeaderBoard())\r\n      }\r\n      \r\n    } catch {\r\n      dispatch(postGameResultFailure());\r\n    }\r\n  };\r\n};\r\n\r\n\r\n","import {\r\n  makeChoice,\r\n  finishGame,\r\n  generateCell,\r\n  checkWiner\r\n} from \"./ActionsCreators\";\r\nimport { postGameResult } from \"./AppAsyncActions\";\r\n\r\nexport const choice = (fieldID, whoClicked) => {\r\n  return (dispatch, getState) => {\r\n    dispatch(makeChoice(fieldID, whoClicked));\r\n    const { Game } = getState();\r\n    if (checkWiner(Game)) {\r\n      dispatch(checkWiner(Game));\r\n      dispatch(finishGame());\r\n      dispatch(postGameResult());\r\n    } else {\r\n      dispatch(generateCell());\r\n    }\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { choice } from \"../../../../actions/GameAction\";\r\nimport * as styles from \"./Cell.module.css\";\r\n\r\nconst Cell = ({ id }) => {\r\n  const delay = useSelector(state => state.Game.delay);\r\n  const isActive = useSelector(state => state.Game.field[id].isActive);\r\n  const whoseField = useSelector(state => state.Game.field[id].whoseField);\r\n  const dispatch = useDispatch();\r\n\r\n  let timer;\r\n  if (isActive) {\r\n    timer = setTimeout(() => {\r\n      dispatch(choice(id, \"AI\"));\r\n    }, delay);\r\n  }\r\n  const className = [styles.Field];\r\n\r\n  if (isActive) {\r\n    className.push(styles.Active);\r\n  }\r\n\r\n  if (whoseField === \"Player\") {\r\n    className.push(styles.Player);\r\n  } else if (whoseField === \"AI\") {\r\n    className.push(styles.AI);\r\n  }\r\n\r\n  const handlerClick = () => {\r\n    if (isActive) {\r\n      clearTimeout(timer);\r\n      dispatch(choice(id, \"Player\"));\r\n    }\r\n  };\r\n  return <div className={className.join(\" \")} onClick={handlerClick}></div>;\r\n};\r\n\r\nexport { Cell };\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Cell } from \"./Cell/Cell\";\r\nimport * as styles from \"./GameField.module.css\";\r\n\r\nconst GameField = () => {\r\n  const fields = useSelector(state => state.Game.field.length);\r\n  const singelFieldSize = 50;\r\n  const fieldSideSize = Math.sqrt(fields) * singelFieldSize;\r\n  const style = {\r\n    width: fieldSideSize,\r\n    height: fieldSideSize\r\n  };\r\n\r\n  return (\r\n    <div className={styles.GameField} style={style}>\r\n      {Array(fields)\r\n        .fill(0)\r\n        .map((cell, index) => (\r\n          <Cell key={index} id={index} />\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { GameField };\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport * as styles from \"./Message.module.css\";\r\n\r\nconst Message = () => {\r\n  const message = useSelector(state => state.App.message);\r\n  return (\r\n    <div className={styles.Message}>\r\n      <p\r\n        style={\r\n          message.includes(\"AI\") || message.includes(\"internet\")\r\n            ? { color: \"#e85a5f\" }\r\n            : null\r\n        }\r\n      >\r\n        {message}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { Message };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  startGame,\r\n  drawGameField,\r\n  savePlayerName,\r\n  generateCell\r\n} from \"../../../actions/ActionsCreators\";\r\nimport * as styles from \"./PlayerSetup.module.css\";\r\n\r\nconst PlayerSetup = () => {\r\n  const dispatch = useDispatch();\r\n  const levelsList = useSelector(state => state.App.levels);\r\n  const isFirstGame = useSelector(state => state.Game.isFirstGame);\r\n  const gameIsOn = useSelector(state => state.Game.gameIsOn);\r\n  const defaultSettings = useSelector(state => state.App.defaultSettings);\r\n\r\n  useEffect(() => {\r\n    if (gameIsOn) {\r\n      dispatch(generateCell());\r\n    }\r\n  }, [gameIsOn, dispatch]);\r\n\r\n  useEffect(() => {\r\n    dispatch(drawGameField(defaultSettings));\r\n  }, [dispatch, defaultSettings]);\r\n\r\n  const difficultyNames = Object.keys(levelsList);\r\n\r\n  const [playerName, setName] = useState(\"\");\r\n  const [isDifficultyChoiced, choiceDifficulty] = useState(false);\r\n  const handlers = {\r\n    select: e => {\r\n      if (e.target.value) {\r\n        choiceDifficulty(true);\r\n        dispatch(drawGameField(levelsList[e.target.value]));\r\n      } else {\r\n        choiceDifficulty(false);\r\n      }\r\n    },\r\n    input: e => {\r\n      setName(e.target.value);\r\n    },\r\n    submit: e => {\r\n      e.preventDefault();\r\n      dispatch(savePlayerName(playerName));\r\n      dispatch(startGame());\r\n    }\r\n  };\r\n  return (\r\n    <form className={styles.Form} onSubmit={handlers.submit}>\r\n      <select\r\n        className={styles.Select}\r\n        id=\"gameMode\"\r\n        onChange={handlers.select}\r\n        disabled={gameIsOn}\r\n      >\r\n        <option value=\"\">Pick game mode</option>\r\n        {difficultyNames.map((name, index) => (\r\n          <option key={index} value={name}>\r\n            {name.replace(\"Mode\", \"\")}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <input\r\n        className={styles.Input}\r\n        type=\"text\"\r\n        placeholder=\"Enter your name\"\r\n        value={playerName}\r\n        onChange={handlers.input}\r\n        required\r\n        disabled={gameIsOn}\r\n      />\r\n      <button\r\n        className={styles.Button}\r\n        disabled={gameIsOn !== !isDifficultyChoiced}\r\n      >\r\n        {isFirstGame ? \"play\" : \"play again\"}\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport { PlayerSetup };\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { requestGameSettings } from \"../../actions/AppAsyncActions\";\r\nimport { GameField } from \"./GameField/GameField\";\r\nimport { Message } from \"./Message/Message\";\r\nimport { PlayerSetup } from \"./PlayerSetup/PlayerSetup\";\r\nimport * as styles from \"./Game.module.css\";\r\n\r\nconst Game = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(requestGameSettings());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <section className={styles.Game}>\r\n      <PlayerSetup />\r\n      <Message />\r\n      <GameField />\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import React from \"react\";\r\nimport * as styles from \"./Player.module.css\";\r\n\r\nconst Player = ({ winner, date }) => {\r\n  return (\r\n    <li className={styles.PlayerItem}>\r\n      <span>{winner}</span>\r\n      <span>{date}</span>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport { Player };\r\n","import React, { useEffect } from \"react\";\r\nimport { Player } from \"./Player/Player\";\r\nimport * as styles from \"./LeaderBoard.module.css\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { requestLeaderBoard } from \"../../actions/AppAsyncActions\";\r\n\r\nconst LeaderBoard = () => {\r\n  const dispatch = useDispatch();\r\n  const players = useSelector(state => state.App.liaderBoard);\r\n\r\n  useEffect(() => {\r\n    dispatch(requestLeaderBoard());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <section className={styles.LeaderBoard}>\r\n      <h2>Leader Board</h2>\r\n      <ul>\r\n        {players.reverse().map((player, index) => (\r\n          <Player key={index} {...player} />\r\n        ))}\r\n      </ul>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default LeaderBoard;\r\n","import React from \"react\";\nimport Game from \"./components/Game/\";\nimport LeaderBoard from \"./components/LeaderBoard\";\nimport * as styles from \"./App.module.css\";\n\nfunction App() {\n  return (\n    <div className={styles.wrapper}>\n      <Game />\n      <LeaderBoard />\n    </div>\n  );\n}\n\nexport default App;\n","import constants from \"../constants\";\r\n\r\nconst { types, defaultState } = constants;\r\n\r\nexport default function App(state = defaultState.AppDefaultState, action) {\r\n  switch (action.type) {\r\n    case types.GET_GAME_SETTINGS: {\r\n      return {\r\n        ...state,\r\n        levels: action.payload\r\n      };\r\n    }\r\n    case types.CONNECTION_ERROR: {\r\n      return {\r\n        ...state,\r\n        message: action.payload\r\n      };\r\n    }\r\n    case types.GET_LEADER_BOARD: {\r\n      return {\r\n        ...state,\r\n        liaderBoard: action.payload\r\n      };\r\n    }\r\n    case types.SET_PLAYER_NAME: {\r\n      return {\r\n        ...state,\r\n        player: action.payload\r\n      };\r\n    }\r\n    case types.PLAYER_WIN: {\r\n      return {\r\n        ...state,\r\n        message: `${state.player} win!`,\r\n        winner: state.player\r\n      };\r\n    }\r\n\r\n    case types.AI_WIN: {\r\n      return {\r\n        ...state,\r\n        message: \"AI win!\",\r\n        winner: \"AI\"\r\n      };\r\n    }\r\n    case types.A_DRAW: {\r\n      return {\r\n        ...state,\r\n        message: \"draw! try again\",\r\n        winner: \"\"\r\n      };\r\n    }\r\n    case types.POST_GAME_RESULT: {\r\n      return {\r\n        ...state,\r\n        winner: \"\"\r\n      };\r\n    }\r\n\r\n    default: {\r\n      return {\r\n        ...state\r\n      };\r\n    }\r\n  }\r\n}\r\n","import constants from \"../constants\";\r\n\r\nconst { types, defaultState } = constants;\r\n\r\nexport default function Game(state = defaultState.GameDefaultState, action) {\r\n  switch (action.type) {\r\n    case types.TO_DRAW_FIELD: {\r\n      const field = Array(Math.pow(action.payload.field, 2))\r\n        .fill(0)\r\n        .map((cell, index) => ({\r\n          id: index,\r\n          isActive: false,\r\n          whoseField: \"none\"\r\n        }));\r\n      return {\r\n        ...state,\r\n        field,\r\n        delay: action.payload.delay\r\n      };\r\n    }\r\n\r\n    case types.START_GAME: {\r\n      if (!state.isFirstGame) {\r\n        const resetField = state.field.map(cell => {\r\n          cell.whoseField = \"none\";\r\n          return cell;\r\n        });\r\n        return {\r\n          ...state,\r\n          field: resetField,\r\n          gameIsOn: true\r\n        };\r\n      }\r\n      return {\r\n        ...state,\r\n        gameIsOn: true\r\n      };\r\n    }\r\n\r\n    case types.GENERATE_RANDOM_CELL: {\r\n      const randomID = (({ field, filledCells }) => {\r\n        for (let i = 0; i <= field.length; i++) {\r\n          const randID = Math.round(Math.random() * (field.length - 1));\r\n          if (!filledCells.includes(randID)) {\r\n            return randID;\r\n          }\r\n        }\r\n      })(state);\r\n\r\n      const filledCells = [...state.filledCells, randomID];\r\n\r\n      const field = state.field.map(cell => {\r\n        if (cell.id === randomID) {\r\n          cell.isActive = true;\r\n        }\r\n        return cell;\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        field,\r\n        filledCells\r\n      };\r\n    }\r\n    case types.MAKE_CHOICE: {\r\n      const field = state.field.map(cell => {\r\n        if (cell.id === action.payload.cellID) {\r\n          cell.whoseField = action.payload.whoClicked;\r\n          cell.isActive = false;\r\n        }\r\n        return cell;\r\n      });\r\n      const AIPoints = field.filter(cell => cell.whoseField === \"AI\").length;\r\n      const PlayerPoints = field.filter(cell  => cell.whoseField === \"Player\").length;\r\n      return {\r\n        ...state,\r\n        field,\r\n        AIPoints,\r\n        PlayerPoints\r\n      };\r\n    }\r\n    case types.FINISH_GAME: {\r\n      return {\r\n        ...state,\r\n        filledCells: [],\r\n        gameIsOn: false,\r\n        isFirstGame: false\r\n      };\r\n    }\r\n    default: {\r\n      return {\r\n        ...state\r\n      };\r\n    }\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport App from \"./AppReducer\";\r\nimport Game from \"./GameReducer\";\r\n\r\nexport default combineReducers({\r\n  App,\r\n  Game\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport './index.css';\nimport configureStore from \"./store/configureStor\";\nimport { Provider } from \"react-redux\";\n\nconst store = configureStore();\n\nconst app = (\n  <Provider store={store}>\n    \n    <App />\n  </Provider>\n);\nconsole.dir(React)\nReactDOM.render(app, document.getElementById(\"root\"));\n","import { createStore, applyMiddleware} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"../reducers/rootReducer\";\r\n\r\n\r\n\r\nexport default function consigureStore() {\r\n  return createStore(rootReducer, applyMiddleware(thunk));\r\n}\r\n"],"sourceRoot":""}